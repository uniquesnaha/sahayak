import os
import json
import logging
import vertexai
from vertexai.preview.generative_models import GenerativeModel
#inc

logger = logging.getLogger("app.agents.mindmap_generator")

# ─── Vertex AI Initialization ───────────────────────────────────────────────
vertexai.init(
    project=os.environ["GOOGLE_CLOUD_PROJECT"],
    location=os.environ["GOOGLE_CLOUD_LOCATION"],
)

# Load Gemini model
gemini = GenerativeModel("gemini-2.5-pro")

def fix_plantuml_code(uml_code: str) -> str:
    """
    Cleans and formats PlantUML mind map code generated by Gemini.
    """
    logger.debug("⚙️ Raw before cleaning:\n%s", uml_code)

    # 1. Handle escaped newlines and quotes
    uml_code = uml_code.replace('\\n', '\n').replace('\\"', '"')

    # 2. Remove JSON/malformed wrappers
    uml_code = uml_code.strip().strip('"').strip('`').strip('}')

    # 3. If Gemini returns markdown-style code block, remove ```plantuml or ``` lines
    if uml_code.startswith("```"):
        uml_code = uml_code.replace("```plantuml", "").replace("```", "").strip()

    # 4. Ensure start/end tags
    if "@startmindmap" not in uml_code.lower():
        uml_code = "@startmindmap\n" + uml_code
    if "@endmindmap" not in uml_code.lower():
        uml_code += "\n@endmindmap"

    # 5. Clean up lines
    lines = uml_code.splitlines()
    cleaned_lines = [line.strip() for line in lines if line.strip()]
    result = "\n".join(cleaned_lines)

    logger.debug("✅ Cleaned PlantUML code:\n%s", result)
    return result


def run_mindmap_pipeline(
    text: str,
    grade: int,
    subject: str
) -> dict:
    """
    Uses Gemini to generate PlantUML code for a mind map and returns cleaned code.

    Args:
        text: The topic prompt.
        grade: Grade level.
        subject: Subject name.

    Returns:
        A dict with key 'code' containing cleaned PlantUML code.
    """
    prompt = (
        f"As a Grade {grade} {subject} teacher, generate PlantUML code for a mind map diagram "
        f"based on the topic: {text}. Use rectangular or cloud-style nodes. "
        f"Only return valid PlantUML code. Do not include markdown or explanations."
    )

    logger.debug("🧠 Mindmap prompt: %s", prompt)

    # Step 1: Ask Gemini
    response = gemini.generate_content(prompt)
    raw_code = response.text.strip()
    logger.debug("🪵 Raw Gemini response:\n%r", raw_code)

    # Step 2: Try extracting from JSON if wrapped
    try:
        maybe_json = json.loads(raw_code)
        if isinstance(maybe_json, dict) and "code" in maybe_json:
            raw_code = maybe_json["code"]
            logger.debug("📦 Extracted 'code' from JSON response.")
    except json.JSONDecodeError:
        pass  # Not JSON — skip

    # Step 3: Clean the code
    cleaned_code = fix_plantuml_code(raw_code)

    # Step 4: Return
    return {"code": cleaned_code}
